void kernel init_kernel(global int* array,
                        int n){
    int i = get_global_id(0);
    if(i>=n) return;

    array[i] = i;
}

void kernel smooth_kernel(global int* input,
                          global int* result,
                          local int* lmem,
                          int n){
    int i = get_global_id(0);

#if 1
    int local_id = get_local_id(0);
    int div = 1;
    int sum = i < n ? input[i] : 0;

    lmem[local_id+1] = sum; /* local memory full except first and last 
                                    spot of every work group */

    /* load values in first and last lmem spots of each work group
       except first and last work items of the grid */
    if(local_id == 0 && i != 0){
      lmem[0] = input[i-1];
    }
    if(local_id == get_local_size(0)-1 && i != n-1){
        lmem[get_local_size(0) + 1] = input[i+1];
    }
    
    // local memory fully loaded for each work-group
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // we passed the fence so out-of-range work-items can exit
    if(i>=n) return;

    if(i != 0){
        div++;
        sum = sum + lmem[local_id];
    }
    if(i != n-1){
        div++;
        sum = sum + lmem[local_id+2];
    }

    result[i] = sum / div;

#else

if(i>=n) return;

int d = 1;
int sum = input[i];
if(i != 0){
        d++;
        sum = sum + input[i-1];
    }
    if(i != n-1){
        d++;
        sum = sum + input[i+1];
    }

    result[i] = sum / d;

#endif
    // result[i] = (input[i-1] + input[i] + input[i+1]) / nels;
    // result[i] = (lmem[local_id-1] + lmem[local_id] + lmem[local_id+1]) / 3;
  }
