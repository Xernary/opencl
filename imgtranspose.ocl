kernel void init_array(write_only image2d_t img){
	
	int r = get_global_id(1);
	int c = get_global_id(0);

	int nrows = get_image_height(img);
	int ncols = get_image_width(img);

	if(r >= nrows || c >= ncols) return;

	write_imagei(img, (int2)(c, r), (int4)(r-c, 0, 0, 0));
}

kernel void init_array_lmem(global int* input,
			    int nrows,
			    int ncols){
	
	int r = get_global_id(1);
	int c = get_global_id(0);

	if(r >= nrows || c >= ncols) return;

	input[r * ncols + c] = r - c;
}


kernel void transpose_array(read_only image2d_t input,
			    global int* output,
			    int pitch_el){
	
	int r = get_global_id(1);
	int c = get_global_id(0);

	int out_nrows = get_image_width(input);
	int out_ncols = get_image_height(input);

	if(r >= out_nrows || c >= out_ncols) return;

	int4 px = read_imagei(input, (int2)(r, c));

	output[r * pitch_el + c] = px.x;
} 

kernel void transpose_lmem(global int* input,
                           int nrows_in,
                           int ncols_in,
                           local int* lmem,
                           global int* output){

    int r_in = get_global_id(1);
    int c_in = get_global_id(0);

    if(r_in < nrows_in && c_in < ncols_in)
    	lmem[get_local_id(1) * get_local_size(0) + get_local_id(0)] = input[r_in * ncols_in + c_in];

    barrier(CLK_LOCAL_MEM_FENCE);

    int r_out = get_group_id(0) * get_local_size(1) + get_local_id(1);
    int c_out = get_group_id(1) * get_local_size(0) + get_local_id(0);

    // write
    if(r_out < ncols_in && c_out < nrows_in)
    	output[r_out * nrows_in + c_out] = lmem[get_local_id(0) * get_local_size(1) + get_local_id(1)]; 
    
  }





